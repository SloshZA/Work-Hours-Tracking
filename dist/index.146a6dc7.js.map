{"mappings":"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","sources":["Github Projectos/Time Tracker/javascript.js"],"sourcesContent":["let db;\r\n// Use a single variable/key for any active activity\r\nlet activeActivityData = null;\r\nconst ACTIVE_ACTIVITY_KEY = 'activeActivityData';\r\n\r\n// --- Modal Handling (Add End Trip Modal elements) ---\r\nconst startTripModal = document.getElementById('startTripModal');\r\nconst closeModalBtn = document.getElementById('closeModalBtn');\r\nconst startTripForm = document.getElementById('startTripForm');\r\nconst modalStartKmInput = document.getElementById('modalStartKm');\r\nconst modalCustomerSelect = document.getElementById('modalCustomer');\r\nconst modalPurposeInput = document.getElementById('modalPurpose');\r\nconst modalVehicleDisplay = document.getElementById('modalVehicleDisplay');\r\n\r\n// End Trip Modal Elements\r\nconst endTripModal = document.getElementById('endTripModal');\r\nconst closeEndModalBtn = document.getElementById('closeEndModalBtn');\r\nconst endTripForm = document.getElementById('endTripForm');\r\nconst modalEndKmInput = document.getElementById('modalEndKm');\r\nconst modalWorkDetailsInput = document.getElementById('modalWorkDetails');\r\nconst completeTripBtn = document.getElementById('completeTripBtn'); // Button on main page\r\n\r\n// --- NEW: Add references for new modal elements ---\r\nconst startChoiceModal = document.getElementById('startChoiceModal');\r\nconst closeStartChoiceModalBtn = document.getElementById('closeStartChoiceModalBtn');\r\nconst startTravelBtn = document.getElementById('startTravelBtn');\r\nconst startOfficeBtn = document.getElementById('startOfficeBtn');\r\nconst startChoiceCancelBtn = document.getElementById('startChoiceCancelBtn');\r\n\r\nconst officeEntryModal = document.getElementById('officeEntryModal');\r\nconst closeOfficeEntryModalBtn = document.getElementById('closeOfficeEntryModalBtn');\r\nconst officeEntryForm = document.getElementById('officeEntryForm');\r\nconst officeCustomerSelect = document.getElementById('officeCustomerSelect');\r\nconst officeWorkDetails = document.getElementById('officeWorkDetails');\r\nconst saveOfficeEntryBtn = document.getElementById('saveOfficeEntryBtn');\r\nconst officePurposeInput = document.getElementById('officePurpose'); // Add purpose input\r\n\r\n// --- NEW: Work Reminder Modal Elements ---\r\nconst workReminderModal = document.getElementById('workReminderModal');\r\nconst closeReminderModalBtn = document.getElementById('closeReminderModalBtn');\r\nconst workReminderForm = document.getElementById('workReminderForm');\r\nconst reminderCustomerSelect = document.getElementById('reminderCustomerSelect');\r\nconst reminderPurposeInput = document.getElementById('reminderPurposeInput');\r\nconst reminderDateInput = document.getElementById('reminderDateInput');\r\nconst saveReminderBtn = document.getElementById('saveReminderBtn'); // Optional, if needed later\r\nconst workReminderBtn = document.getElementById('workReminderBtn'); // The button that opens the modal\r\n\r\n// --- References for Active Displays ---\r\nconst activeTripInfoDiv = document.getElementById('activeTripInfo');\r\nconst activeTripDetailsDiv = document.getElementById('activeTripDetails');\r\nconst activeOfficeInfoDiv = document.getElementById('activeOfficeInfo');\r\nconst activeOfficeDetailsDiv = document.getElementById('activeOfficeDetails');\r\nconst editOfficeWorkBtn = document.getElementById('editOfficeWorkBtn');\r\nconst completeOfficeWorkBtn = document.getElementById('completeOfficeWorkBtn');\r\nconst editTripBtn = document.getElementById('editTripBtn'); // Add reference for the new button\r\n\r\n// At the top of the file where other elements are defined\r\nconst deleteOfficeWorkBtn = document.getElementById('deleteOfficeWorkBtn');\r\nconst deleteTripBtn = document.getElementById('deleteTripBtn');\r\n\r\nconst request = indexedDB.open('TripTrackerDB', 5);\r\n\r\nrequest.onupgradeneeded = (event) => {\r\n    db = event.target.result;\r\n    console.log(`Upgrading database to version ${db.version}`);\r\n\r\n    if (event.oldVersion < 1) { // Example: Initial setup\r\n        // Code for version 1\r\n    }\r\n    if (event.oldVersion < 2) { // Example: Changes for version 2\r\n        // Code for version 2\r\n    }\r\n    if (event.oldVersion < 3) { // Example: Changes for version 3\r\n        // Code for version 3\r\n    }\r\n    if (event.oldVersion < 4) { // Changes made for version 4\r\n        console.log('Applying upgrades for version 4');\r\n        if (!db.objectStoreNames.contains('trips')) {\r\n            console.log('Creating trips store');\r\n            db.createObjectStore('trips', { keyPath: 'id', autoIncrement: true });\r\n        }\r\n        if (!db.objectStoreNames.contains('customers')) {\r\n            console.log('Creating customers store');\r\n            const customerStore = db.createObjectStore('customers', { keyPath: 'id', autoIncrement: true });\r\n            if (!customerStore.indexNames.contains('name')) {\r\n                customerStore.createIndex('name', 'name', { unique: false });\r\n            }\r\n        }\r\n        if (!db.objectStoreNames.contains('vehicles')) {\r\n            console.log('Creating vehicles store');\r\n            const vehicleStore = db.createObjectStore('vehicles', { keyPath: 'id', autoIncrement: true });\r\n            if (!vehicleStore.indexNames.contains('name')) {\r\n                vehicleStore.createIndex('name', 'name', { unique: true });\r\n            }\r\n        } else {\r\n            const transaction = event.target.transaction;\r\n            const vehicleStore = transaction.objectStore('vehicles');\r\n            if (!vehicleStore.indexNames.contains('name')) {\r\n                 vehicleStore.createIndex('name', 'name', { unique: true });\r\n            }\r\n        }\r\n        if (!db.objectStoreNames.contains('preferences')) {\r\n            console.log('Creating preferences store');\r\n            db.createObjectStore('preferences', { keyPath: 'id' });\r\n        }\r\n        if (!db.objectStoreNames.contains('reminders')) {\r\n            console.log('Creating reminders store');\r\n            db.createObjectStore('reminders', { keyPath: 'id', autoIncrement: true });\r\n        }\r\n    }\r\n    if (event.oldVersion < 5) { // Changes made for version 5 (from Reports.js)\r\n        console.log('Applying upgrades for version 5');\r\n        if (!db.objectStoreNames.contains('reports')) {\r\n            console.log('Creating reports store');\r\n            const reportStore = db.createObjectStore('reports', { keyPath: 'id', autoIncrement: true });\r\n            reportStore.createIndex('tripId', 'tripId', { unique: false });\r\n            console.log('Created tripId index on reports store');\r\n        }\r\n    }\r\n};\r\n\r\nrequest.onsuccess = (event) => {\r\n    db = event.target.result;\r\n    console.log('Database opened successfully');\r\n    \r\n    // Add default vehicle if it doesn't exist\r\n    addDefaultVehicleIfNeeded(); // Call the new function\r\n    \r\n    // --- MODIFIED: Check for any active activity ---\r\n    const storedActivity = localStorage.getItem(ACTIVE_ACTIVITY_KEY);\r\n    if (storedActivity) {\r\n        try {\r\n            activeActivityData = JSON.parse(storedActivity);\r\n            console.log('Restored active activity from localStorage:', activeActivityData);\r\n            if (activeActivityData.type === 'travel') {\r\n                displayActiveTripInfo(activeActivityData);\r\n            } else if (activeActivityData.type === 'office') {\r\n                displayActiveOfficeInfo(activeActivityData);\r\n            }\r\n            // Hide the start button if any activity is active\r\n            const startActivityButton = document.getElementById('saveTripBtn');\r\n            if (startActivityButton) {\r\n                startActivityButton.style.display = 'none';\r\n            }\r\n        } catch (e) {\r\n            console.error('Error parsing stored active activity data:', e);\r\n            localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n            activeActivityData = null; // Clear the variable\r\n        }\r\n    }\r\n    \r\n    // Load and set the last used user\r\n    const userSelect = document.getElementById('userSelect');\r\n    if (userSelect) {\r\n        getPreference('lastUser', (lastUser) => {\r\n            if (lastUser && userSelect.querySelector(`option[value=\"${lastUser}\"]`)) {\r\n                userSelect.value = lastUser;\r\n                console.log('Set user dropdown to last used:', lastUser);\r\n            } else {\r\n                console.log('No valid lastUser preference found.');\r\n                // Optionally set to a default value if needed\r\n                // userSelect.value = \"\"; // Or the first user, etc.\r\n            }\r\n        });\r\n    } else {\r\n        console.warn('User select element (#userSelect) not found.');\r\n    }\r\n    \r\n    populateVehicleDropdown();\r\n    setupEventListeners();\r\n};\r\n\r\nrequest.onerror = (event) => {\r\n    console.error('Error opening database:', event.target.error);\r\n    alert('Error opening database. Please refresh the page.');\r\n};\r\n\r\nfunction saveTrip(trip, onSuccessCallback) {\r\n    const transaction = db.transaction(['trips'], 'readwrite');\r\n    const store = transaction.objectStore('trips');\r\n    const request = store.add(trip);\r\n\r\n    request.onsuccess = () => {\r\n        console.log('Trip saved successfully to DB:', trip);\r\n        // Alert moved to the specific handlers (start/end)\r\n        if (onSuccessCallback) {\r\n            onSuccessCallback(request.result); // Pass back the generated ID if needed\r\n        }\r\n        // Update vehicle preference only when starting? Or always? Let's keep it here.\r\n    if (trip.vehicle) {\r\n        savePreference('lastVehicle', trip.vehicle);\r\n        }\r\n    };\r\n    \r\n    request.onerror = (event) => {\r\n        console.error('Error saving trip to DB:', event.target.error);\r\n        alert('Error saving trip data.');\r\n    };\r\n}\r\n\r\nfunction getTrips(callback) {\r\n    const transaction = db.transaction(['trips'], 'readonly');\r\n    const store = transaction.objectStore('trips');\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n        callback(request.result);\r\n    };\r\n}\r\n\r\nfunction saveCustomer(customer) {\r\n    const transaction = db.transaction(['customers'], 'readwrite');\r\n    const store = transaction.objectStore('customers');\r\n    store.add(customer);\r\n}\r\n\r\nfunction getCustomers(callback) {\r\n    if (!db) {\r\n        console.error('DB not ready for getCustomers');\r\n        callback([]);\r\n        return;\r\n    }\r\n    const transaction = db.transaction(['customers'], 'readonly');\r\n    const store = transaction.objectStore('customers');\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n        callback(request.result || []);\r\n    };\r\n    request.onerror = (event) => {\r\n        console.error('Error getting customers:', event.target.error);\r\n        callback([]);\r\n    };\r\n}\r\n\r\nfunction saveVehicle(vehicle) {\r\n    const transaction = db.transaction(['vehicles'], 'readwrite');\r\n    const store = transaction.objectStore('vehicles');\r\n    store.add(vehicle);\r\n}\r\n\r\nfunction getVehicles(callback) {\r\n    if (!db) {\r\n        console.error('DB not ready for getVehicles');\r\n        callback([]);\r\n        return;\r\n    }\r\n    const transaction = db.transaction(['vehicles'], 'readonly');\r\n    const store = transaction.objectStore('vehicles');\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n        callback(request.result || []);\r\n    };\r\n    request.onerror = (event) => {\r\n        console.error('Error getting vehicles:', event.target.error);\r\n        callback([]);\r\n    };\r\n}\r\n\r\nfunction savePreference(key, value) {\r\n    const transaction = db.transaction(['preferences'], 'readwrite');\r\n    const store = transaction.objectStore('preferences');\r\n    \r\n    const preference = {\r\n        id: key,\r\n        value: value\r\n    };\r\n    \r\n    const request = store.put(preference);\r\n    request.onsuccess = () => {\r\n        console.log(`Preference saved: ${key} = ${value}`);\r\n    };\r\n    \r\n    request.onerror = (event) => {\r\n        console.error(`Error saving preference ${key}:`, event.target.error);\r\n    };\r\n}\r\n\r\nfunction getPreference(key, callback) {\r\n    if (!db) {\r\n        console.error('Database not available');\r\n        if (callback) callback(null);\r\n        return;\r\n    }\r\n    \r\n    try {\r\n        const transaction = db.transaction(['preferences'], 'readonly');\r\n        const store = transaction.objectStore('preferences');\r\n        const request = store.get(key);\r\n        \r\n        request.onsuccess = () => {\r\n            const result = request.result ? request.result.value : null;\r\n            console.log(`Retrieved preference ${key}:`, result);\r\n            if (callback) callback(result);\r\n        };\r\n        \r\n        request.onerror = (event) => {\r\n            console.error(`Error getting preference ${key}:`, event.target.error);\r\n            if (callback) callback(null);\r\n        };\r\n    } catch (error) {\r\n        console.error(`Exception getting preference ${key}:`, error);\r\n        if (callback) callback(null);\r\n    }\r\n}\r\n\r\n// Load vehicles into dropdown\r\nfunction populateVehicleDropdown() {\r\n    const vehicleSelect = document.getElementById('vehicleSelect');\r\n    if (!vehicleSelect) {\r\n        console.warn('Vehicle select element not found');\r\n        return;\r\n    }\r\n    \r\n    getVehicles((vehicles) => {\r\n        console.log('Populating vehicles:', vehicles);\r\n        vehicleSelect.innerHTML = '<option value=\"\">-- Select Vehicle --</option>'; // Clear existing options\r\n        \r\n        if (vehicles && vehicles.length > 0) {\r\n            vehicles.forEach(vehicle => {\r\n                const option = document.createElement('option');\r\n                option.value = vehicle.name;\r\n                option.textContent = `${vehicle.name} (${vehicle.currentKm || 0} KM)`; // Display KM in dropdown\r\n                option.dataset.currentKm = vehicle.currentKm || '0'; // Store KM in data attribute\r\n                vehicleSelect.appendChild(option);\r\n            });\r\n            \r\n            getPreference('lastVehicle', (lastVehicle) => {\r\n                if (lastVehicle && vehicleSelect.querySelector(`option[value=\"${lastVehicle}\"]`)) {\r\n                        vehicleSelect.value = lastVehicle;\r\n                    console.log('Set vehicle dropdown to last used:', lastVehicle);\r\n                } else {\r\n                    console.log('No valid lastVehicle preference found or vehicle deleted.');\r\n                }\r\n            });\r\n        } else {\r\n            console.log('No vehicles found in database to populate dropdown.');\r\n        }\r\n    });\r\n}\r\n\r\n// --- Modify populateCustomerDropdown to accept a callback ---\r\nfunction populateCustomerDropdown(selectElementId, callback) { // Add callback parameter\r\n    const customerSelect = document.getElementById(selectElementId);\r\n    if (!customerSelect) {\r\n        console.error(`Customer select element with ID ${selectElementId} not found.`);\r\n        if (callback) callback(); // Call callback even on error to prevent blocking\r\n        return;\r\n    }\r\n\r\n    getCustomers((customers) => {\r\n        console.log(`Populating customers for #${selectElementId}:`, customers);\r\n        // Keep the default option\r\n        customerSelect.innerHTML = '<option value=\"\">-- Select Customer --</option>';\r\n\r\n        if (customers && customers.length > 0) {\r\n            // Sort customers alphabetically\r\n            customers.sort((a, b) => (a.name || '').localeCompare(b.name || ''));\r\n            customers.forEach(customer => {\r\n                const option = document.createElement('option');\r\n                option.value = customer.name;\r\n                option.textContent = customer.name;\r\n                customerSelect.appendChild(option);\r\n            });\r\n        } else {\r\n            console.log('No customers found in database.');\r\n        }\r\n\r\n        // Execute the callback function after populating\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    });\r\n}\r\n\r\n// --- Modal Handling ---\r\n\r\n// Start Trip Modal (Travel) - Modified to handle editing\r\nfunction openStartTripModal(isEditing = false) {\r\n    const vehicleSelect = document.getElementById('vehicleSelect');\r\n    const startTripSubmitBtn = startTripForm.querySelector('button[type=\"submit\"]'); // Get submit button\r\n\r\n    let vehicleName = '';\r\n    let currentKm = '';\r\n    let customerToSelect = '';\r\n    let purposeToSet = '';\r\n\r\n    if (isEditing && activeActivityData && activeActivityData.type === 'travel') {\r\n        // Editing existing trip\r\n        vehicleName = activeActivityData.vehicle;\r\n        currentKm = activeActivityData.startKm.toString(); // Use stored start KM\r\n        customerToSelect = activeActivityData.customer;\r\n        purposeToSet = activeActivityData.purpose;\r\n        if (startTripSubmitBtn) startTripSubmitBtn.textContent = 'Update Trip';\r\n        modalStartKmInput.readOnly = true; // Make Start KM read-only when editing\r\n        modalVehicleDisplay.textContent = vehicleName; // Display vehicle name\r\n    } else {\r\n        // Starting new trip\r\n        const selectedOption = vehicleSelect.options[vehicleSelect.selectedIndex];\r\n        if (!selectedOption || !selectedOption.value) {\r\n            alert('Please select a vehicle first.');\r\n            return;\r\n        }\r\n        vehicleName = selectedOption.value;\r\n        currentKm = selectedOption.dataset.currentKm || '0';\r\n        if (startTripSubmitBtn) startTripSubmitBtn.textContent = 'Start Trip'; // Reset button text\r\n        modalStartKmInput.readOnly = false; // Make Start KM editable for new trip\r\n        modalVehicleDisplay.textContent = vehicleName; // Display vehicle name\r\n    }\r\n\r\n    // Populate modal fields\r\n    modalStartKmInput.value = currentKm;\r\n    modalPurposeInput.value = purposeToSet; // Set purpose (empty if new)\r\n\r\n    // Populate customers AND display modal in the callback\r\n    populateCustomerDropdown('modalCustomer', () => {\r\n        // This callback runs AFTER the dropdown is populated\r\n        if (isEditing && customerToSelect) {\r\n            modalCustomerSelect.value = customerToSelect; // Select the customer\r\n            console.log(`Set travel modal customer dropdown to: ${customerToSelect}`);\r\n        } else {\r\n            modalCustomerSelect.value = ''; // Ensure customer is cleared for new trip\r\n        }\r\n        startTripModal.style.display = 'block'; // Display modal now\r\n        console.log(`Start trip modal displayed. Editing: ${isEditing}`);\r\n    });\r\n}\r\n\r\nfunction closeStartTripModal() {\r\n    if (startTripModal) {\r\n        startTripModal.style.display = 'none';\r\n        // Reset button text on close\r\n        const startTripSubmitBtn = startTripForm.querySelector('button[type=\"submit\"]');\r\n        if (startTripSubmitBtn) startTripSubmitBtn.textContent = 'Start Trip';\r\n        modalStartKmInput.readOnly = false; // Ensure KM field is editable next time\r\n    }\r\n}\r\n\r\n// Modified to handle both starting and updating a trip\r\nfunction handleStartTripFormSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const customer = modalCustomerSelect.value;\r\n    const purpose = modalPurposeInput.value;\r\n    const userSelect = document.getElementById('userSelect');\r\n    const user = userSelect ? userSelect.value : 'Unknown';\r\n\r\n    if (!user) {\r\n        alert('Please select a user.');\r\n        return;\r\n    }\r\n    if (!customer || !purpose) {\r\n        alert('Please fill in Customer and Purpose.');\r\n        return;\r\n    }\r\n\r\n    // Check if we are updating an existing active travel trip\r\n    if (activeActivityData && activeActivityData.type === 'travel') {\r\n        console.log('Updating active travel trip...');\r\n        const updatedTripData = {\r\n            ...activeActivityData, // Keep original startTime, vehicle, startKm, status, type\r\n            customer: customer,\r\n            purpose: purpose,\r\n            user: user, // Update user in case it changed\r\n        };\r\n\r\n        activeActivityData = updatedTripData;\r\n        try {\r\n            localStorage.setItem(ACTIVE_ACTIVITY_KEY, JSON.stringify(activeActivityData));\r\n            console.log('Active travel data updated in localStorage.');\r\n            savePreference('lastUser', user); // Save user preference\r\n\r\n            displayActiveTripInfo(activeActivityData); // Update the display\r\n            closeStartTripModal();\r\n            alert('Trip details updated successfully!');\r\n\r\n        } catch (e) {\r\n            console.error('Error updating active travel data in localStorage:', e);\r\n            alert('Could not update trip data locally. Please try again.');\r\n            // Optionally revert activeActivityData if save fails? For now, leave it.\r\n        }\r\n\r\n    } else {\r\n        // --- Starting a NEW travel trip ---\r\n        const vehicleName = modalVehicleDisplay.textContent;\r\n        const startKm = modalStartKmInput.value;\r\n\r\n        if (!vehicleName || !startKm) {\r\n            alert('Vehicle or Start KM is missing.'); // Should not happen if modal opened correctly\r\n            return;\r\n        }\r\n\r\n        const trip = {\r\n            startKm: parseInt(startKm),\r\n            customer,\r\n            purpose,\r\n            vehicle: vehicleName,\r\n            startTime: new Date().toISOString(),\r\n            status: 'active',\r\n            user: user,\r\n            type: 'travel'\r\n        };\r\n\r\n        console.log('New travel activity started:', trip);\r\n\r\n        activeActivityData = trip;\r\n        try {\r\n            localStorage.setItem(ACTIVE_ACTIVITY_KEY, JSON.stringify(activeActivityData));\r\n            console.log('Active travel data saved to localStorage.');\r\n            savePreference('lastUser', user);\r\n            savePreference('lastVehicle', vehicleName); // Save vehicle preference on start\r\n\r\n            displayActiveTripInfo(trip);\r\n            closeStartTripModal();\r\n\r\n            const startActivityButton = document.getElementById('saveTripBtn');\r\n            if (startActivityButton) {\r\n                startActivityButton.style.display = 'none';\r\n            }\r\n        } catch (e) {\r\n            console.error('Error saving active travel data to localStorage:', e);\r\n            alert('Could not save activity data locally. Please try again.');\r\n            activeActivityData = null; // Clear if save failed\r\n            localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n            const startActivityButton = document.getElementById('saveTripBtn');\r\n            if (startActivityButton) startActivityButton.style.display = 'block'; // Show start button again\r\n        }\r\n    }\r\n}\r\n\r\n// End Trip Modal - No changes needed\r\nfunction openEndTripModal() {\r\n    if (!activeActivityData) {\r\n        alert('No active trip found!');\r\n        return;\r\n    }\r\n    // Clear previous entries\r\n    modalEndKmInput.value = '';\r\n    modalWorkDetailsInput.value = '';\r\n    // Pre-fill end KM if possible? Maybe based on last trip? For now, leave blank.\r\n    // modalEndKmInput.value = activeTripData.startKm; // Example prefill (likely incorrect)\r\n\r\n    if (endTripModal) {\r\n        endTripModal.style.display = 'block';\r\n    }\r\n}\r\n\r\nfunction closeEndTripModal() {\r\n    if (endTripModal) {\r\n        endTripModal.style.display = 'none';\r\n    }\r\n}\r\n\r\nfunction handleEndTripFormSubmit(event) {\r\n    event.preventDefault();\r\n    if (!activeActivityData || activeActivityData.type !== 'travel') { // Check type\r\n        alert('Error: No active travel trip data found.');\r\n        closeEndTripModal();\r\n        return;\r\n    }\r\n\r\n    const endKm = modalEndKmInput.value;\r\n    const workDetails = modalWorkDetailsInput.value;\r\n\r\n    if (!endKm) {\r\n        alert('Please enter the End KM.');\r\n        return;\r\n    }\r\n\r\n    const endKmValue = parseInt(endKm);\r\n    if (isNaN(endKmValue) || endKmValue < activeActivityData.startKm) {\r\n        alert('End KM must be a number and greater than or equal to Start KM.');\r\n        return;\r\n    }\r\n\r\n    const completedTrip = {\r\n        ...activeActivityData,\r\n        endKm: endKmValue,\r\n        workDetails: workDetails || '',\r\n        endTime: new Date().toISOString(),\r\n        status: 'completed',\r\n        date: activeActivityData.startTime\r\n    };\r\n\r\n    console.log('Attempting to save completed travel trip:', completedTrip);\r\n\r\n    saveTrip(completedTrip, (success) => {\r\n        if (success) {\r\n        alert('Trip completed and saved successfully!');\r\n\r\n        // Clear local state\r\n            activeActivityData = null;\r\n            localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n\r\n        // Update UI\r\n            if (activeTripInfoDiv) activeTripInfoDiv.style.display = 'none';\r\n            const startActivityButton = document.getElementById('saveTripBtn');\r\n            if (startActivityButton) startActivityButton.style.display = 'block';\r\n\r\n            closeEndTripModal();\r\n            updateVehicleKm(completedTrip.vehicle, completedTrip.endKm);\r\n            populateVehicleDropdown();\r\n        } else {\r\n             alert('Failed to save completed trip.');\r\n        }\r\n    });\r\n}\r\n\r\n// --- NEW: Start Choice Modal Functions ---\r\nfunction openStartChoiceModal() {\r\n    if (startChoiceModal) {\r\n        startChoiceModal.style.display = 'block';\r\n    }\r\n}\r\n\r\nfunction closeStartChoiceModal() {\r\n    if (startChoiceModal) {\r\n        startChoiceModal.style.display = 'none';\r\n    }\r\n}\r\n\r\n// --- NEW: Office Entry Modal Functions ---\r\nfunction openOfficeEntryModal(isEditing = false) {\r\n    if (officeEntryModal) {\r\n        let customerToSelect = ''; // Variable to hold the customer name\r\n\r\n        if (isEditing && activeActivityData && activeActivityData.type === 'office') {\r\n            // Store the customer to select later\r\n            customerToSelect = activeActivityData.customer || '';\r\n            // Pre-fill other fields immediately\r\n            officePurposeInput.value = activeActivityData.purpose || '';\r\n            officeWorkDetails.value = activeActivityData.workDetails || '';\r\n            saveOfficeEntryBtn.textContent = 'Update Office Entry';\r\n        } else {\r\n            // Clear form for new entry\r\n            officeCustomerSelect.value = ''; // Clear selection immediately\r\n            officePurposeInput.value = '';\r\n            officeWorkDetails.value = '';\r\n            saveOfficeEntryBtn.textContent = 'Start Work';\r\n        }\r\n\r\n        // Populate dropdown and set value in callback\r\n        populateCustomerDropdown('officeCustomerSelect', () => {\r\n            // This runs after options are added\r\n            if (isEditing && customerToSelect) {\r\n                officeCustomerSelect.value = customerToSelect;\r\n                console.log(`Set office modal customer dropdown to: ${customerToSelect}`);\r\n            }\r\n             // Ensure the modal is displayed after population/selection attempt\r\n             officeEntryModal.style.display = 'block';\r\n        });\r\n\r\n        // Note: We moved the display:block into the callback to ensure\r\n        // the dropdown is fully ready before showing the modal.\r\n        // If this causes issues, we can move it back out, but the selection\r\n        // might visually \"jump\" if the population takes a moment.\r\n    }\r\n}\r\n\r\nfunction closeOfficeEntryModal() {\r\n    if (officeEntryModal) {\r\n        officeEntryModal.style.display = 'none';\r\n        // Reset button text on close to the default for a new entry\r\n        saveOfficeEntryBtn.textContent = 'Start Work'; // Changed reset text\r\n    }\r\n}\r\n\r\nfunction handleSaveOfficeEntry(event) {\r\n    event.preventDefault();\r\n\r\n    // --- Add logging here ---\r\n    console.log('handleSaveOfficeEntry called. Current activeActivityData:', JSON.stringify(activeActivityData));\r\n    // --- End logging ---\r\n\r\n    const customer = officeCustomerSelect.value;\r\n    const purpose = officePurposeInput.value.trim(); // Get purpose\r\n    const workDetails = officeWorkDetails.value.trim();\r\n    const userSelect = document.getElementById('userSelect');\r\n    const user = userSelect ? userSelect.value : 'Unknown';\r\n\r\n    if (!user) {\r\n        alert('Please select a user.');\r\n        return;\r\n    }\r\n    if (!customer) {\r\n        alert('Please select a customer.');\r\n        return;\r\n    }\r\n    if (!purpose) {\r\n        alert('Please enter a purpose.');\r\n        return;\r\n    }\r\n\r\n    const now = new Date().toISOString();\r\n    let officeEntryData;\r\n\r\n    if (activeActivityData && activeActivityData.type === 'office') {\r\n        // --- Add logging here ---\r\n        console.log('Entering EDITING block for office work.');\r\n        // --- End logging ---\r\n\r\n        // --- Editing existing active office work ---\r\n        if (!workDetails) {\r\n            alert('Please enter work details when editing.');\r\n            return; // This is likely where the alert is coming from\r\n        }\r\n        console.log('Updating active office entry...');\r\n        officeEntryData = {\r\n            ...activeActivityData, // Keep original startTime, user, type etc.\r\n            customer: customer,\r\n            purpose: purpose,\r\n            workDetails: workDetails,\r\n            user: user,\r\n        };\r\n    } else {\r\n        // --- Add logging here ---\r\n        console.log('Entering CREATING block for office work.');\r\n        // --- End logging ---\r\n\r\n        // --- Creating new active office work ---\r\n        console.log('Starting new office entry...');\r\n        officeEntryData = {\r\n            user: user,\r\n            customer: customer,\r\n            purpose: purpose,\r\n            workDetails: workDetails, // Save it even if empty\r\n            startTime: now,\r\n            date: now,\r\n            status: 'active',\r\n            type: 'office',\r\n            vehicle: null,\r\n            startKm: null,\r\n            endKm: null\r\n        };\r\n    }\r\n\r\n    // Store in global variable and localStorage\r\n    activeActivityData = officeEntryData;\r\n    try {\r\n        localStorage.setItem(ACTIVE_ACTIVITY_KEY, JSON.stringify(activeActivityData));\r\n        console.log('Active office data saved/updated in localStorage.');\r\n        savePreference('lastUser', user); // Save user preference\r\n\r\n        displayActiveOfficeInfo(activeActivityData); // Display the active office info\r\n        closeOfficeEntryModal();\r\n\r\n        const startActivityButton = document.getElementById('saveTripBtn');\r\n        if (startActivityButton) startActivityButton.style.display = 'none';\r\n\r\n    } catch (e) {\r\n        console.error('Error saving active office data to localStorage:', e);\r\n        alert('Could not save activity data locally. Please try again.');\r\n        activeActivityData = null;\r\n        localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n        const startActivityButton = document.getElementById('saveTripBtn');\r\n        if (startActivityButton) startActivityButton.style.display = 'block';\r\n    }\r\n}\r\n\r\n// --- NEW: Complete Office Work ---\r\nfunction handleCompleteOfficeWork() {\r\n    if (!activeActivityData || activeActivityData.type !== 'office') {\r\n        alert('No active office work found to complete.');\r\n        return;\r\n    }\r\n\r\n    // Confirm completion? (Optional)\r\n    // if (!confirm('Are you sure you want to complete this office work entry?')) {\r\n    //     return;\r\n    // }\r\n\r\n    const completedOfficeEntry = {\r\n        ...activeActivityData,\r\n        endTime: new Date().toISOString(), // Set end time now\r\n        status: 'completed'\r\n    };\r\n\r\n    console.log('Attempting to save completed office entry:', completedOfficeEntry);\r\n\r\n    saveTrip(completedOfficeEntry, (success) => { // Use generic saveTrip\r\n        if (success) {\r\n            alert('Office work completed and saved successfully!');\r\n\r\n            // Clear local state\r\n            activeActivityData = null;\r\n            localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n\r\n            // Update UI\r\n            if (activeOfficeInfoDiv) activeOfficeInfoDiv.style.display = 'none';\r\n            const startActivityButton = document.getElementById('saveTripBtn');\r\n            if (startActivityButton) startActivityButton.style.display = 'block'; // Show start button\r\n\r\n        } else {\r\n            alert('Failed to save completed office work.');\r\n            // Keep active state? Or clear? Let's keep it for retry.\r\n        }\r\n    });\r\n}\r\n\r\n// --- NEW: Edit Office Work ---\r\nfunction handleEditOfficeWork() {\r\n     if (!activeActivityData || activeActivityData.type !== 'office') {\r\n        alert('No active office work found to edit.');\r\n        return;\r\n    }\r\n    console.log('Editing active office work:', activeActivityData);\r\n    openOfficeEntryModal(true); // Open modal in editing mode\r\n}\r\n\r\n// --- Function to update vehicle KM (Needs Implementation) ---\r\nfunction updateVehicleKm(vehicleName, newKm) {\r\n    console.log(`Updating KM for ${vehicleName} to ${newKm}`);\r\n    if (!db) {\r\n        console.error('DB not available to update vehicle KM');\r\n        return;\r\n    }\r\n\r\n    const transaction = db.transaction(['vehicles'], 'readwrite');\r\n    const store = transaction.objectStore('vehicles');\r\n    // We need the vehicle's ID to use put. Let's get it by name index.\r\n    const index = store.index('name');\r\n    const getRequest = index.get(vehicleName);\r\n\r\n    getRequest.onsuccess = () => {\r\n        const vehicle = getRequest.result;\r\n        if (vehicle) {\r\n            vehicle.currentKm = newKm;\r\n            const putRequest = store.put(vehicle); // Use put to update\r\n            putRequest.onsuccess = () => {\r\n                console.log(`Successfully updated KM for ${vehicleName}`);\r\n            };\r\n            putRequest.onerror = (event) => {\r\n                console.error(`Error updating KM for ${vehicleName}:`, event.target.error);\r\n            };\r\n        } else {\r\n            console.warn(`Vehicle ${vehicleName} not found for KM update.`);\r\n        }\r\n    };\r\n    getRequest.onerror = (event) => {\r\n        console.error(`Error finding vehicle ${vehicleName} for KM update:`, event.target.error);\r\n    };\r\n}\r\n\r\n// --- Display Active Trip Info (Travel) ---\r\nfunction displayActiveTripInfo(trip) {\r\n    // Use the globally defined constants instead of getting elements again\r\n    if (activeTripInfoDiv && activeTripDetailsDiv && completeTripBtn && deleteTripBtn && editTripBtn) {\r\n        activeTripDetailsDiv.innerHTML = `\r\n            <div class=\"info-block\"><strong>Start KM:</strong> ${trip.startKm}</div>\r\n            <div class=\"info-block\"><strong>Customer:</strong> ${trip.customer}</div>\r\n            <div class=\"info-block\"><strong>Purpose:</strong> ${trip.purpose}</div>\r\n        `;\r\n        // Make sure other active display is hidden\r\n        if (activeOfficeInfoDiv) activeOfficeInfoDiv.style.display = 'none'; // Hide office info\r\n        activeTripInfoDiv.style.display = 'block';\r\n\r\n        // No need to set display style here as the buttons are in a container\r\n        // that inherits visibility from activeTripInfoDiv\r\n    } else {\r\n        // Log which specific element might be missing for easier debugging\r\n        console.error('Could not find active trip display elements or buttons. Check IDs:', {\r\n            activeTripInfoDiv: !!activeTripInfoDiv,\r\n            activeTripDetailsDiv: !!activeTripDetailsDiv,\r\n            completeTripBtn: !!completeTripBtn,\r\n            deleteTripBtn: !!deleteTripBtn,\r\n            editTripBtn: !!editTripBtn // Check the global constant\r\n        });\r\n    }\r\n}\r\n\r\n// --- NEW: Display Active Office Info ---\r\nfunction displayActiveOfficeInfo(officeData) {\r\n    if (activeOfficeInfoDiv && activeOfficeDetailsDiv && editOfficeWorkBtn && completeOfficeWorkBtn) {\r\n        // Create a container for the top row (Customer & Purpose)\r\n        activeOfficeDetailsDiv.innerHTML = `\r\n            <div class=\"office-info-row\">\r\n                <div class=\"info-block office-customer\"><strong>Customer:</strong> ${officeData.customer}</div>\r\n                <div class=\"info-block office-purpose\"><strong>Purpose:</strong> ${officeData.purpose}</div>\r\n            </div>\r\n            <div class=\"work-details-section\">\r\n                <strong>Work Details:</strong>\r\n                <textarea id=\"activeWorkDetailsTextarea\" class=\"details-content-editable\">${officeData.workDetails}</textarea>\r\n            </div>\r\n        `;\r\n\r\n        // Add event listener to the new textarea\r\n        const detailsTextarea = document.getElementById('activeWorkDetailsTextarea');\r\n        if (detailsTextarea) {\r\n            detailsTextarea.addEventListener('change', (event) => {\r\n                if (activeActivityData && activeActivityData.type === 'office') {\r\n                    console.log('Work details changed, updating...');\r\n                    activeActivityData.workDetails = event.target.value;\r\n                    try {\r\n                        localStorage.setItem(ACTIVE_ACTIVITY_KEY, JSON.stringify(activeActivityData));\r\n                        console.log('Active office data updated in localStorage after details edit.');\r\n                    } catch (e) {\r\n                        console.error('Error saving updated office data to localStorage:', e);\r\n                        alert('Could not save updated work details.');\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Auto-resize textarea height based on content\r\n            function autoResizeTextarea() {\r\n                detailsTextarea.style.height = 'auto';\r\n                detailsTextarea.style.height = detailsTextarea.scrollHeight + 'px';\r\n            }\r\n            detailsTextarea.addEventListener('input', autoResizeTextarea);\r\n            // Initial resize on display\r\n            setTimeout(autoResizeTextarea, 0);\r\n        }\r\n\r\n        // Make sure other active display is hidden\r\n        if (activeTripInfoDiv) activeTripInfoDiv.style.display = 'none';\r\n        activeOfficeInfoDiv.style.display = 'block';\r\n    } else {\r\n        console.error('Could not find active office display elements.');\r\n    }\r\n}\r\n\r\n// --- Event Listeners Setup ---\r\nfunction setupEventListeners() {\r\n    // Target the main \"Start New Activity\" button\r\n    const startNewActivityBtn = document.getElementById('saveTripBtn');\r\n    const viewTripsBtn = document.getElementById('viewTripsBtn');\r\n    const manageCustomersBtn = document.getElementById('manageCustomersBtn');\r\n    const manageVehiclesBtn = document.getElementById('manageVehiclesBtn');\r\n    const manageDataBtn = document.getElementById('manageDataBtn');\r\n    const workScheduleBtn = document.getElementById('workScheduleBtn');\r\n    const reportsBtn = document.getElementById('reportsBtn'); // <-- Get the new button\r\n    const completeTripBtnOnPage = document.getElementById('completeTripBtn'); // Travel complete\r\n    const editTripBtnOnPage = document.getElementById('editTripBtn'); // Travel edit button\r\n    const workReminderBtn = document.getElementById('workReminderBtn'); // Get the reminder button\r\n    const closeReminderModalBtn = document.getElementById('closeReminderModalBtn'); // Get the reminder close button\r\n    const workReminderForm = document.getElementById('workReminderForm'); // Get the reminder form\r\n\r\n    console.log('Work Reminder Button Element:', workReminderBtn);\r\n\r\n    // --- MODIFIED: Main Start Button checks for *any* active activity ---\r\n    if (startNewActivityBtn) {\r\n        startNewActivityBtn.addEventListener('click', (event) => {\r\n            event.preventDefault();\r\n            // Check if *any* activity is already active\r\n            if (localStorage.getItem(ACTIVE_ACTIVITY_KEY)) {\r\n                 alert('An activity (Travel or Office Work) is already in progress. Please complete it first.');\r\n                 return;\r\n            }\r\n            // Check user selected\r\n            const userSelect = document.getElementById('userSelect');\r\n            if (!userSelect || !userSelect.value) {\r\n                alert('Please select a user first.');\r\n                return;\r\n            }\r\n            openStartChoiceModal(); // Open the choice modal\r\n        });\r\n    } else {\r\n        console.warn('Button with ID \"saveTripBtn\" not found');\r\n    }\r\n\r\n    // Complete Trip Button (Travel) - No change in listener setup\r\n    if (completeTripBtnOnPage) {\r\n        completeTripBtnOnPage.addEventListener('click', openEndTripModal);\r\n    }\r\n\r\n    // Start Trip Modal (Travel) Listeners - No change\r\n    if (closeModalBtn) closeModalBtn.addEventListener('click', closeStartTripModal);\r\n    if (startTripForm) startTripForm.addEventListener('submit', handleStartTripFormSubmit);\r\n\r\n    // End Trip Modal (Travel) Listeners - No change\r\n    if (closeEndModalBtn) closeEndModalBtn.addEventListener('click', closeEndTripModal);\r\n    if (endTripForm) endTripForm.addEventListener('submit', handleEndTripFormSubmit);\r\n\r\n    // Start Choice Modal Listeners - No change\r\n    if (closeStartChoiceModalBtn) closeStartChoiceModalBtn.addEventListener('click', closeStartChoiceModal);\r\n    if (startChoiceCancelBtn) startChoiceCancelBtn.addEventListener('click', closeStartChoiceModal);\r\n    if (startTravelBtn) {\r\n        startTravelBtn.addEventListener('click', () => {\r\n            closeStartChoiceModal();\r\n            openStartTripModal(); // Open travel modal\r\n        });\r\n    }\r\n    if (startOfficeBtn) {\r\n        startOfficeBtn.addEventListener('click', () => {\r\n            closeStartChoiceModal();\r\n            openOfficeEntryModal(false); // Open office modal for NEW entry\r\n        });\r\n    }\r\n\r\n    // Office Entry Modal Listeners\r\n    if (closeOfficeEntryModalBtn) closeOfficeEntryModalBtn.addEventListener('click', closeOfficeEntryModal);\r\n    if (officeEntryForm) officeEntryForm.addEventListener('submit', handleSaveOfficeEntry); // Handles save/update\r\n\r\n    // --- NEW: Active Office Work Button Listeners ---\r\n    if (editOfficeWorkBtn) {\r\n        editOfficeWorkBtn.addEventListener('click', handleEditOfficeWork);\r\n    } else {\r\n        console.warn('Button with ID \"editOfficeWorkBtn\" not found');\r\n    }\r\n    if (completeOfficeWorkBtn) {\r\n        completeOfficeWorkBtn.addEventListener('click', handleCompleteOfficeWork);\r\n                    } else {\r\n        console.warn('Button with ID \"completeOfficeWorkBtn\" not found');\r\n    }\r\n\r\n    // Close modals if clicked outside\r\n    window.addEventListener('click', (event) => {\r\n        if (event.target === startTripModal) {\r\n            closeStartTripModal();\r\n        }\r\n        if (event.target === endTripModal) {\r\n            closeEndTripModal();\r\n        }\r\n        // --- NEW: Add checks for new modals ---\r\n        if (event.target === startChoiceModal) {\r\n            closeStartChoiceModal();\r\n        }\r\n        if (event.target === officeEntryModal) {\r\n            closeOfficeEntryModal();\r\n        }\r\n        if (event.target === workReminderModal) { // <-- ADD THIS CHECK\r\n            closeWorkReminderModal();\r\n        }\r\n    });\r\n\r\n    // Navigation Button Listeners - No change\r\n    if (viewTripsBtn) {\r\n        viewTripsBtn.addEventListener('click', () => {\r\n            window.location.href = 'tripsheet.html';\r\n            });\r\n    }\r\n    // --- NEW: Reports Button Listener ---\r\n    if (reportsBtn) {\r\n        reportsBtn.addEventListener('click', () => {\r\n            window.location.href = 'Reports.html'; // Navigate to the new page\r\n        });\r\n    } else {\r\n        console.warn('Button with ID \"reportsBtn\" not found');\r\n    }\r\n    // --- NEW: Work Schedule Button Listener ---\r\n    if (workScheduleBtn) {\r\n        workScheduleBtn.addEventListener('click', () => {\r\n            window.location.href = 'Work_Schedule.html'; // Navigate to the new page\r\n        });\r\n    } else {\r\n        console.warn('Button with ID \"workScheduleBtn\" not found');\r\n    }\r\n    // --- End New Listener ---\r\n    if (manageCustomersBtn) {\r\n        manageCustomersBtn.addEventListener('click', () => {\r\n            window.location.href = 'customers.html';\r\n        });\r\n    }\r\n    if (manageVehiclesBtn) {\r\n        manageVehiclesBtn.addEventListener('click', () => {\r\n            window.location.href = 'vehicles.html';\r\n        });\r\n    }\r\n    if (manageDataBtn) {\r\n        manageDataBtn.addEventListener('click', () => {\r\n            window.location.href = 'datamanagement.html';\r\n        });\r\n    }\r\n\r\n    // Add a new function to handle deleting an office task\r\n    if (deleteOfficeWorkBtn) {\r\n        deleteOfficeWorkBtn.addEventListener('click', handleDeleteOfficeWork);\r\n    } else {\r\n        console.warn('Button with ID \"deleteOfficeWorkBtn\" not found');\r\n    }\r\n\r\n    // NEW: Add listener for the delete trip button\r\n    if (deleteTripBtn) {\r\n        deleteTripBtn.addEventListener('click', handleDeleteTripTask);\r\n    } else {\r\n        console.warn('Button with ID \"deleteTripBtn\" not found');\r\n    }\r\n\r\n    // --- NEW: Edit Trip Button Listener ---\r\n    if (editTripBtnOnPage) {\r\n        editTripBtnOnPage.addEventListener('click', handleEditTripTask);\r\n    } else {\r\n        console.warn('Button with ID \"editTripBtn\" not found');\r\n    }\r\n\r\n    // --- NEW: Work Reminder Button Listener ---\r\n    if (workReminderBtn) {\r\n        console.log('Attaching click listener to Work Reminder Button');\r\n        workReminderBtn.addEventListener('click', openWorkReminderModal);\r\n    } else {\r\n        console.warn('Button with ID \"workReminderBtn\" not found');\r\n    }\r\n\r\n    // --- NEW: Work Reminder Modal Close Button Listener ---\r\n    if (closeReminderModalBtn) {\r\n        console.log('Attaching click listener to Work Reminder Close Button'); // Add log\r\n        closeReminderModalBtn.addEventListener('click', closeWorkReminderModal);\r\n    } else {\r\n        console.warn('Button with ID \"closeReminderModalBtn\" not found');\r\n    }\r\n\r\n    // --- NEW: Work Reminder Form Submit Listener (IMPLEMENTED) ---\r\n    const reminderTypeSelect = document.getElementById('reminderType'); // Get the type dropdown\r\n\r\n    if (workReminderForm) {\r\n        console.log('Attaching submit listener to Work Reminder Form');\r\n        workReminderForm.addEventListener('submit', (event) => {\r\n            event.preventDefault(); // Prevent actual form submission\r\n            console.log('Work Reminder form submitted');\r\n\r\n            const type = reminderTypeSelect.value; // Get the selected type\r\n            const customer = reminderCustomerSelect.value;\r\n            const purpose = reminderPurposeInput.value.trim();\r\n            const reminderDate = reminderDateInput.value; // Format YYYY-MM-DD\r\n\r\n            if (!type || !customer || !purpose || !reminderDate) {\r\n                alert('Please fill in all fields.');\r\n                return;\r\n            }\r\n\r\n            const reminderData = {\r\n                type: type, // Add the type to the reminder data\r\n                customer: customer,\r\n                purpose: purpose,\r\n                reminderDate: reminderDate,\r\n                createdAt: new Date().toISOString(), // Optional: track when it was created\r\n                status: 'pending' // Optional: track status (pending, done, etc.)\r\n            };\r\n\r\n            console.log('Attempting to save reminder:', reminderData);\r\n\r\n            saveReminder(reminderData, (success) => {\r\n                if (success) {\r\n                    alert('Work reminder saved successfully!');\r\n                    closeWorkReminderModal(); // Close modal after successful save\r\n                } else {\r\n                    alert('Failed to save work reminder. Please try again.');\r\n                }\r\n            });\r\n        });\r\n    } else {\r\n        console.warn('Form with ID \"workReminderForm\" not found');\r\n    }\r\n}\r\n\r\n// --- Function to add default vehicle ---\r\nfunction addDefaultVehicleIfNeeded() {\r\n    if (!db) {\r\n        console.error('DB not available to add default vehicle.');\r\n        return;\r\n    }\r\n\r\n    const transaction = db.transaction(['vehicles'], 'readwrite');\r\n    const store = transaction.objectStore('vehicles');\r\n    const index = store.index('name'); // Use the name index\r\n    const getRequest = index.get('Test'); // Check if 'Test' vehicle exists\r\n\r\n    getRequest.onsuccess = () => {\r\n        if (!getRequest.result) {\r\n            // 'Test' vehicle doesn't exist, so add it\r\n            console.log('Default vehicle \"Test\" not found. Adding it.');\r\n            const defaultVehicle = {\r\n                name: 'Test',\r\n                currentKm: 500\r\n                // licensePlate: '5555' // Add this later if schema is updated\r\n            };\r\n            const addRequest = store.add(defaultVehicle);\r\n\r\n            addRequest.onsuccess = () => {\r\n                console.log('Default vehicle \"Test\" added successfully.');\r\n                // Re-populate dropdown if needed, though it happens later anyway\r\n                // populateVehicleDropdown();\r\n            };\r\n            addRequest.onerror = (event) => {\r\n                console.error('Error adding default vehicle \"Test\":', event.target.error);\r\n            };\r\n        } else {\r\n            // 'Test' vehicle already exists\r\n            console.log('Default vehicle \"Test\" already exists.');\r\n        }\r\n    };\r\n\r\n    getRequest.onerror = (event) => {\r\n        console.error('Error checking for default vehicle \"Test\":', event.target.error);\r\n    };\r\n\r\n    transaction.onerror = (event) => {\r\n        console.error('Transaction error while checking/adding default vehicle:', event.target.error);\r\n    };\r\n}\r\n\r\n// Add a new function to handle deleting an office task\r\nfunction handleDeleteOfficeWork() {\r\n    if (!activeActivityData || activeActivityData.type !== 'office') {\r\n        alert('No active office work found to delete.');\r\n        return;\r\n    }\r\n\r\n    // Confirm deletion\r\n    if (confirm('Are you sure you want to delete this office task? This action cannot be undone.')) {\r\n        console.log('Deleting office task:', activeActivityData);\r\n        \r\n        // Clear the active activity data\r\n        activeActivityData = null;\r\n        localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n        \r\n        // Update UI\r\n        if (activeOfficeInfoDiv) {\r\n            activeOfficeInfoDiv.style.display = 'none';\r\n        }\r\n        \r\n        const startActivityButton = document.getElementById('saveTripBtn');\r\n        if (startActivityButton) {\r\n            startActivityButton.style.display = 'block';\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n// Add a new function to handle deleting a trip task\r\nfunction handleDeleteTripTask() {\r\n    if (!activeActivityData || activeActivityData.type !== 'travel') {\r\n        alert('No active trip found to delete.');\r\n        return;\r\n    }\r\n\r\n    // Confirm deletion\r\n    if (confirm('Are you sure you want to delete this trip? This action cannot be undone.')) {\r\n        console.log('Deleting active trip:', activeActivityData);\r\n        \r\n        // Clear the active activity data\r\n        activeActivityData = null;\r\n        localStorage.removeItem(ACTIVE_ACTIVITY_KEY);\r\n        \r\n        // Update UI\r\n        if (activeTripInfoDiv) {\r\n            activeTripInfoDiv.style.display = 'none';\r\n        }\r\n        \r\n        const startActivityButton = document.getElementById('saveTripBtn');\r\n        if (startActivityButton) {\r\n            startActivityButton.style.display = 'block';\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n// --- NEW: Edit Trip Task ---\r\nfunction handleEditTripTask() {\r\n    if (!activeActivityData || activeActivityData.type !== 'travel') {\r\n        alert('No active trip found to edit.');\r\n        return;\r\n    }\r\n    console.log('Editing active trip:', activeActivityData);\r\n    openStartTripModal(true); // Open modal in editing mode\r\n}\r\n\r\n// --- NEW: Work Reminder Modal Functions (Moved Earlier) ---\r\nfunction openWorkReminderModal() {\r\n    console.log('openWorkReminderModal function called');\r\n    if (workReminderModal) {\r\n        // Clear previous values\r\n        reminderPurposeInput.value = '';\r\n        reminderDateInput.value = ''; // Clear date\r\n\r\n        // Populate customers and then display\r\n        populateCustomerDropdown('reminderCustomerSelect', () => {\r\n            reminderCustomerSelect.value = ''; // Ensure default is selected\r\n            console.log('Setting workReminderModal display to block');\r\n            workReminderModal.style.display = 'block';\r\n            console.log('Work Reminder modal opened.');\r\n        });\r\n    } else {\r\n        console.error('Work Reminder modal element not found.');\r\n    }\r\n}\r\n\r\nfunction closeWorkReminderModal() {\r\n    if (workReminderModal) {\r\n        console.log('Closing Work Reminder modal'); // Add log\r\n        workReminderModal.style.display = 'none';\r\n    }\r\n}\r\n\r\n// --- Function to save a reminder ---\r\nfunction saveReminder(reminderData, callback) {\r\n    if (!db) {\r\n        console.error('DB not available to save reminder');\r\n        if (callback) callback(false);\r\n        return;\r\n    }\r\n    const transaction = db.transaction(['reminders'], 'readwrite');\r\n    const store = transaction.objectStore('reminders');\r\n    const request = store.add(reminderData);\r\n\r\n    request.onsuccess = () => {\r\n        console.log('Reminder saved successfully to DB:', reminderData);\r\n        if (callback) callback(true, request.result);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n        console.error('Error saving reminder to DB:', event.target.error);\r\n        if (callback) callback(false);\r\n    };\r\n}\r\n\r\nfunction getRemindersFromDB(callback) {\r\n    if (!db) {\r\n        console.error('DB not available to fetch reminders');\r\n        callback([]);\r\n        return;\r\n    }\r\n    const transaction = db.transaction(['reminders'], 'readonly');\r\n    const store = transaction.objectStore('reminders');\r\n    const request = store.getAll();\r\n\r\n    request.onsuccess = () => {\r\n        const reminders = request.result || [];\r\n        console.log('Fetched reminders from DB:', reminders);\r\n        reminders.sort((a, b) => (a.reminderDate || '').localeCompare(b.reminderDate || ''));\r\n        callback(reminders);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n        console.error('Error fetching reminders from DB:', event.target.error);\r\n        callback([]);\r\n    };\r\n}\r\n\r\nfunction setReminderAsActive(reminderId) {\r\n    if (!db) {\r\n        console.error('DB not available to fetch reminder');\r\n        return;\r\n    }\r\n\r\n    const transaction = db.transaction(['reminders'], 'readonly');\r\n    const store = transaction.objectStore('reminders');\r\n    const request = store.get(Number(reminderId));\r\n\r\n    request.onsuccess = () => {\r\n        const reminder = request.result;\r\n        if (!reminder) {\r\n            alert('Reminder not found.');\r\n            return;\r\n        }\r\n\r\n        // Set the reminder as the active task\r\n        const activeTask = {\r\n            type: reminder.type,\r\n            customer: reminder.customer,\r\n            purpose: reminder.purpose,\r\n            startTime: new Date().toISOString(),\r\n            status: 'active',\r\n            reminderId: reminder.id // Optional: Track the reminder ID\r\n        };\r\n\r\n        activeActivityData = activeTask;\r\n        try {\r\n            localStorage.setItem(ACTIVE_ACTIVITY_KEY, JSON.stringify(activeActivityData));\r\n            console.log('Reminder set as active:', activeTask);\r\n\r\n            // Update the UI to show the active task\r\n            if (activeTask.type === 'travel') {\r\n                displayActiveTripInfo(activeTask);\r\n            } else if (activeTask.type === 'office') {\r\n                displayActiveOfficeInfo(activeTask);\r\n            }\r\n\r\n            // Hide the \"Start New Activity\" button\r\n            const startActivityButton = document.getElementById('saveTripBtn');\r\n            if (startActivityButton) {\r\n                startActivityButton.style.display = 'none';\r\n            }\r\n\r\n            alert('Task set as active. You can now start working on it.');\r\n        } catch (e) {\r\n            console.error('Error setting reminder as active:', e);\r\n            alert('Failed to set task as active. Please try again.');\r\n        }\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n        console.error('Error fetching reminder:', event.target.error);\r\n        alert('Failed to fetch reminder. Please try again.');\r\n    };\r\n}\r\n"],"names":[],"version":3,"file":"index.146a6dc7.js.map","sourceRoot":"/__parcel_source_root/"}